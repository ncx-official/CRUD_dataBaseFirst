// <auto-generated />
using System;
using DataBaseManagerApplication.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseManagerApplication.Migrations
{
    [DbContext(typeof(BMStoreContext))]
    partial class BMStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("DataBaseManagerApplication.Models.Authorization", b =>
                {
                    b.Property<long>("IdPerson")
                        .HasColumnType("bigint")
                        .HasColumnName("id_person");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("password");

                    b.HasKey("IdPerson")
                        .HasName("PRIMARY");

                    b.ToTable("authorization", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Class", b =>
                {
                    b.Property<long>("IdClass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_class");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("class_name");

                    b.HasKey("IdClass")
                        .HasName("PRIMARY");

                    b.ToTable("class", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Employee", b =>
                {
                    b.Property<long>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_employee");

                    b.Property<long>("IdPerson")
                        .HasColumnType("bigint")
                        .HasColumnName("id_person");

                    b.Property<long?>("IdStore")
                        .HasColumnType("bigint")
                        .HasColumnName("id_store");

                    b.Property<long?>("IdWorkPosition")
                        .HasColumnType("bigint")
                        .HasColumnName("id_work_position");

                    b.HasKey("IdEmployee")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPerson" }, "id_person");

                    b.HasIndex(new[] { "IdStore" }, "id_store");

                    b.HasIndex(new[] { "IdWorkPosition" }, "id_work_position");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Operation", b =>
                {
                    b.Property<long>("IdOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_operation");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("IdEmployee")
                        .HasColumnType("bigint")
                        .HasColumnName("id_employee");

                    b.Property<long>("IdOperationType")
                        .HasColumnType("bigint")
                        .HasColumnName("id_operation_type");

                    b.Property<long>("IdProduct")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.HasKey("IdOperation")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmployee" }, "id_employee");

                    b.HasIndex(new[] { "IdOperationType" }, "id_operation_type");

                    b.ToTable("operation", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.OperationProduct", b =>
                {
                    b.Property<long>("IdOperation")
                        .HasColumnType("bigint")
                        .HasColumnName("id_operation");

                    b.Property<long>("IdProduct")
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.Property<uint>("OperationProductCount")
                        .HasColumnType("int unsigned")
                        .HasColumnName("operation_product_count");

                    b.Property<decimal>("OperationProductPrice")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("operation_product_price");

                    b.HasKey("IdOperation", "IdProduct")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdProduct" }, "id_product");

                    b.ToTable("operation_product", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.OperationType", b =>
                {
                    b.Property<long>("IdOperationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_operation_type");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_name");

                    b.HasKey("IdOperationType")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TypeName" }, "type_name")
                        .IsUnique();

                    b.ToTable("operation_type", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Person", b =>
                {
                    b.Property<long>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_person");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstName");

                    b.Property<uint>("IdSex")
                        .HasColumnType("int unsigned")
                        .HasColumnName("id_sex");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("middleName");

                    b.HasKey("IdPerson")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdSex" }, "id_sex");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.PersonSex", b =>
                {
                    b.Property<uint>("IdSex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id_sex");

                    b.Property<string>("SexValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sex_value");

                    b.HasKey("IdSex")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SexValue" }, "sex_value")
                        .IsUnique();

                    b.ToTable("person_sex", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Product", b =>
                {
                    b.Property<long>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_product");

                    b.Property<uint?>("Count")
                        .HasColumnType("int unsigned")
                        .HasColumnName("count");

                    b.Property<string>("DefineCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("define_code");

                    b.Property<long?>("IdClass")
                        .HasColumnType("bigint")
                        .HasColumnName("id_class");

                    b.Property<long?>("IdStore")
                        .HasColumnType("bigint")
                        .HasColumnName("id_store");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isAvailable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("UsdPrice")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("usd_price");

                    b.HasKey("IdProduct")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClass" }, "id_class");

                    b.HasIndex(new[] { "IdStore" }, "id_store")
                        .HasDatabaseName("id_store1");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.ScheduleOpen", b =>
                {
                    b.Property<long>("IdScheduleOpen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_schedule_open");

                    b.Property<TimeOnly>("CloseAt")
                        .HasColumnType("time")
                        .HasColumnName("close_at");

                    b.Property<long>("IdWeekDay")
                        .HasColumnType("bigint")
                        .HasColumnName("id_week_day");

                    b.Property<TimeOnly>("OpenAt")
                        .HasColumnType("time")
                        .HasColumnName("open_at");

                    b.HasKey("IdScheduleOpen")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdWeekDay" }, "id_week_day");

                    b.ToTable("schedule_open", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Store", b =>
                {
                    b.Property<long>("IdStore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_store");

                    b.Property<long>("IdScheduleOpen")
                        .HasColumnType("bigint")
                        .HasColumnName("id_schedule_open");

                    b.Property<long>("IdStoreAddress")
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_address");

                    b.Property<long?>("IdStorePhone")
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_phone");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("store_name");

                    b.HasKey("IdStore")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdStoreAddress" }, "id_store_address");

                    b.HasIndex(new[] { "IdStorePhone" }, "id_store_phone");

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreAddress", b =>
                {
                    b.Property<long>("IdStoreAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_address");

                    b.Property<long>("IdStoreCity")
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_city");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("street_name");

                    b.Property<string>("StreetNumberCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("street_number_code");

                    b.HasKey("IdStoreAddress")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdStoreCity" }, "id_store_city");

                    b.ToTable("store_address", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreCity", b =>
                {
                    b.Property<long>("IdStoreCity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_city");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city_name");

                    b.Property<long>("IdStoreCountry")
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_country");

                    b.HasKey("IdStoreCity")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdStoreCountry" }, "id_store_country");

                    b.ToTable("store_city", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreCountry", b =>
                {
                    b.Property<long>("IdStoreCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_country");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country_name");

                    b.HasKey("IdStoreCountry")
                        .HasName("PRIMARY");

                    b.ToTable("store_country", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StorePhone", b =>
                {
                    b.Property<long>("IdStorePhone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_store_phone");

                    b.Property<string>("PhoneValue")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone_value");

                    b.HasKey("IdStorePhone")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PhoneValue" }, "phone_value")
                        .IsUnique();

                    b.ToTable("store_phone", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.WeekDay", b =>
                {
                    b.Property<long>("IdWeekDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_week_day");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("value");

                    b.HasKey("IdWeekDay")
                        .HasName("PRIMARY");

                    b.ToTable("week_day", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.WorkPosition", b =>
                {
                    b.Property<long>("IdWorkPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_work_position");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("position_name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("IdWorkPosition")
                        .HasName("PRIMARY");

                    b.ToTable("work_position", (string)null);
                });

            modelBuilder.Entity("StoreScheduleOpen", b =>
                {
                    b.Property<long>("IdScheduleOpen")
                        .HasColumnType("bigint")
                        .HasColumnName("id_schedule_open");

                    b.Property<long>("IdStore")
                        .HasColumnType("bigint")
                        .HasColumnName("id_store");

                    b.HasKey("IdScheduleOpen", "IdStore")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdStore" }, "id_store")
                        .HasDatabaseName("id_store2");

                    b.ToTable("store_schedule_open", (string)null);
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Authorization", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.Person", "IdPersonNavigation")
                        .WithOne("Authorization")
                        .HasForeignKey("DataBaseManagerApplication.Models.Authorization", "IdPerson")
                        .IsRequired()
                        .HasConstraintName("authorization_ibfk_1");

                    b.Navigation("IdPersonNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Employee", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.Person", "IdPersonNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdPerson")
                        .IsRequired()
                        .HasConstraintName("employee_ibfk_1");

                    b.HasOne("DataBaseManagerApplication.Models.Store", "IdStoreNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdStore")
                        .HasConstraintName("employee_ibfk_2");

                    b.HasOne("DataBaseManagerApplication.Models.WorkPosition", "IdWorkPositionNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdWorkPosition")
                        .HasConstraintName("employee_ibfk_3");

                    b.Navigation("IdPersonNavigation");

                    b.Navigation("IdStoreNavigation");

                    b.Navigation("IdWorkPositionNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Operation", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.Employee", "IdEmployeeNavigation")
                        .WithMany("Operations")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("operation_ibfk_2");

                    b.HasOne("DataBaseManagerApplication.Models.OperationType", "IdOperationTypeNavigation")
                        .WithMany("Operations")
                        .HasForeignKey("IdOperationType")
                        .IsRequired()
                        .HasConstraintName("operation_ibfk_1");

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdOperationTypeNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.OperationProduct", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.Operation", "IdOperationNavigation")
                        .WithMany("OperationProducts")
                        .HasForeignKey("IdOperation")
                        .IsRequired()
                        .HasConstraintName("operation_product_ibfk_1");

                    b.HasOne("DataBaseManagerApplication.Models.Product", "IdProductNavigation")
                        .WithMany("OperationProducts")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("operation_product_ibfk_2");

                    b.Navigation("IdOperationNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Person", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.PersonSex", "IdSexNavigation")
                        .WithMany("People")
                        .HasForeignKey("IdSex")
                        .IsRequired()
                        .HasConstraintName("person_ibfk_1");

                    b.Navigation("IdSexNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Product", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.Class", "IdClassNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdClass")
                        .HasConstraintName("product_ibfk_1");

                    b.HasOne("DataBaseManagerApplication.Models.Store", "IdStoreNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdStore")
                        .HasConstraintName("product_ibfk_2");

                    b.Navigation("IdClassNavigation");

                    b.Navigation("IdStoreNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.ScheduleOpen", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.WeekDay", "IdWeekDayNavigation")
                        .WithMany("ScheduleOpens")
                        .HasForeignKey("IdWeekDay")
                        .IsRequired()
                        .HasConstraintName("schedule_open_ibfk_1");

                    b.Navigation("IdWeekDayNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Store", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.StoreAddress", "IdStoreAddressNavigation")
                        .WithMany("Stores")
                        .HasForeignKey("IdStoreAddress")
                        .IsRequired()
                        .HasConstraintName("store_ibfk_1");

                    b.HasOne("DataBaseManagerApplication.Models.StorePhone", "IdStorePhoneNavigation")
                        .WithMany("Stores")
                        .HasForeignKey("IdStorePhone")
                        .HasConstraintName("store_ibfk_2");

                    b.Navigation("IdStoreAddressNavigation");

                    b.Navigation("IdStorePhoneNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreAddress", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.StoreCity", "IdStoreCityNavigation")
                        .WithMany("StoreAddresses")
                        .HasForeignKey("IdStoreCity")
                        .IsRequired()
                        .HasConstraintName("store_address_ibfk_1");

                    b.Navigation("IdStoreCityNavigation");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreCity", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.StoreCountry", "IdStoreCountryNavigation")
                        .WithMany("StoreCities")
                        .HasForeignKey("IdStoreCountry")
                        .IsRequired()
                        .HasConstraintName("store_city_ibfk_1");

                    b.Navigation("IdStoreCountryNavigation");
                });

            modelBuilder.Entity("StoreScheduleOpen", b =>
                {
                    b.HasOne("DataBaseManagerApplication.Models.ScheduleOpen", null)
                        .WithMany()
                        .HasForeignKey("IdScheduleOpen")
                        .IsRequired()
                        .HasConstraintName("store_schedule_open_ibfk_1");

                    b.HasOne("DataBaseManagerApplication.Models.Store", null)
                        .WithMany()
                        .HasForeignKey("IdStore")
                        .IsRequired()
                        .HasConstraintName("store_schedule_open_ibfk_2");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Class", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Employee", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Operation", b =>
                {
                    b.Navigation("OperationProducts");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.OperationType", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Person", b =>
                {
                    b.Navigation("Authorization")
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.PersonSex", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Product", b =>
                {
                    b.Navigation("OperationProducts");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.Store", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreAddress", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreCity", b =>
                {
                    b.Navigation("StoreAddresses");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StoreCountry", b =>
                {
                    b.Navigation("StoreCities");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.StorePhone", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.WeekDay", b =>
                {
                    b.Navigation("ScheduleOpens");
                });

            modelBuilder.Entity("DataBaseManagerApplication.Models.WorkPosition", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
